#!/bin/bash
# Create .env file with Databricks credentials

echo "🔧 Creating .env file for Databricks configuration..."
echo ""

# Check if .env already exists
if [ -f ".env" ]; then
    echo "⚠️ .env file already exists!"
    read -p "Do you want to overwrite it? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "❌ Cancelled - keeping existing .env file"
        exit 0
    fi
fi

# Get user input
echo "Please provide your Databricks credentials:"
echo ""

read -p "Enter your Databricks workspace URL: " DATABRICKS_HOST
echo ""

read -s -p "Enter your Databricks personal access token: " DATABRICKS_TOKEN
echo ""
echo ""

# Validate inputs
if [[ -z "$DATABRICKS_HOST" ]]; then
    echo "❌ Error: Databricks host cannot be empty"
    exit 1
fi

if [[ -z "$DATABRICKS_TOKEN" ]]; then
    echo "❌ Error: Databricks token cannot be empty"
    exit 1
fi

# Create .env file
cat > .env << EOF
# Databricks Configuration
# Generated by create_env.sh

# Your Databricks workspace URL
DATABRICKS_HOST=$DATABRICKS_HOST

# Your Databricks personal access token
DATABRICKS_TOKEN=$DATABRICKS_TOKEN

# Optional: Uncomment and set default values for the UI
# DEFAULT_VOLUME_PATH=/Volumes/your_catalog/your_schema/your_volume/
# DEFAULT_CATALOG=your_catalog
# DEFAULT_SCHEMA=your_schema
EOF

echo "✅ .env file created successfully!"
echo ""
echo "🔐 Your credentials have been saved to .env file"
echo "📍 Workspace URL: $DATABRICKS_HOST"
echo "🔑 Token: [hidden for security]"
echo ""
echo "🚀 You can now run the app with:"
echo "   python app.py"
echo ""
echo "💡 The app will automatically load your credentials from the .env file"
echo ""
echo "⚠️ Security note: Never commit the .env file to version control!" 